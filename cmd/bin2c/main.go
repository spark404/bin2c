package main

import (
	"flag"
	"fmt"
	"io"
	"os"
	"strings"
)

func main() {
	infileName := flag.String("input", "", "binary file to read")
	outfileName := flag.String("output", "output.h", "header file to create")
	flag.Parse()

	if *infileName == "" {
		flag.PrintDefaults()
		os.Exit(1)
	}

	fmt.Printf("Converting %s into a C header file %s\n", *infileName, *outfileName)

	fileInfo, err := os.Lstat(*infileName)
	if err != nil {
		fmt.Printf("Failed to open input file: %v", err)
		os.Exit(1)
	}

	file, err := os.OpenFile(*infileName, os.O_RDONLY, 0644)
	if err != nil {
		fmt.Printf("Failed to open input file: %v", err)
		os.Exit(1)
	}
	defer file.Close()

	outfile, err := os.OpenFile(*outfileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		fmt.Printf("Failed to open output file: %v", err)
		os.Exit(1)
	}
	defer outfile.Close()

	variableName := strings.ReplaceAll(fileInfo.Name(), ".", "_")

	header := fmt.Sprintf(`/* Generated by bin2c
 * orignal filename: %s
 */

#define LOCATION_EXTFLASH_ATTRIBUTE __attribute__ ((section ("ExtFlashSection"))) __attribute__ ((aligned(4)))

const unsigned char %s[%d] LOCATION_EXTFLASH_ATTRIBUTE = {
`, fileInfo.Name(), variableName, fileInfo.Size())

	footer := fmt.Sprintf(`
};	
	`)

	outfile.WriteString(header)

	buffer := make([]byte, 1024)
	count := 0
	position := 0

	for {
		n, err := file.Read(buffer)
		if err == io.EOF {
			break
		}

		if err != nil {
			fmt.Printf("read error: %v", err)
			os.Exit(1)
		}

		for _, value := range buffer[0:n] {
			if position == 0 {
				outfile.WriteString(fmt.Sprintf("\t0x%02x", value))
			} else if position == 15 {
				outfile.WriteString(fmt.Sprintf(", 0x%02x\n", value))
			} else {
				outfile.WriteString(fmt.Sprintf(", 0x%02x", value))
			}
			position += 1
			position %= 16
		}

		count += n
		fmt.Printf("\rRead %d", count)

	}

	outfile.WriteString(footer)
}
